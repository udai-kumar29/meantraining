/**
 * Matches a filter expression containing translate
 * Group 1: Value passed to the filter
 * Group 2 (optional): Filters applied before the translate filter
 */
var attributeRegex = /\{\{\s*("[^"]*"|'[^']*'|[^|]+)(?:\s*\|\s*(?!translate)([^|\s]+))*\s*(?:\|\s*translate)\s*(?:\s*\|\s*[^|\s]+)*\s*}}/i;
var angularExpression = /\{\{\s*("[^"]*"|'[^']*'|[^|]+)(?:\s*\|\s*(?!translate)([^|\s]+))*\s*(?:\|\s*translate)\s*(?:\s*\|\s*[^|\s]+)*\s*}}/igm;
function parseMatch(match) {
    var previousFilters = match[2] ? match[2].trim() : undefined;
    return {
        match: match[0],
        value: match[1].trim(),
        previousFilters: previousFilters
    };
}
/**
 * Matches the angular expressions from a a text. Returns a match for each expression in the
 * passed in text
 * @param html the text to search for angular expressions
 * @returns {AngularExpressionMatch[]} an array with the found matches
 */
function matchAngularExpressions(html) {
    var matches = [];
    var match;
    do {
        match = angularExpression.exec(html);
        if (match) {
            matches.push(parseMatch(match));
        }
    } while (match);
    return matches;
}
exports.matchAngularExpressions = matchAngularExpressions;
/**
 * Matches the angular expression used in an attribute text. Does
 * @param attributeText the text of the attribute
 * @returns The match of the angular expression if any.
 */
function matchAttribute(attributeText) {
    var match = attributeRegex.exec(attributeText);
    if (match) {
        return parseMatch(match);
    }
    return undefined;
}
exports.matchAttribute = matchAttribute;
//# sourceMappingURL=ng-filters.js.map